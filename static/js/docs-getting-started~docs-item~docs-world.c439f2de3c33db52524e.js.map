{"version":3,"sources":["webpack:///./src/Utils.js","webpack:///./src/ContactUtils.js","webpack:///./src/Box2dWorld.js","webpack:///./src/Box2dObject.js","webpack:///./src/index.js"],"names":["fromPhysicsToCanvas","n","SCALE","fromCanvasToPhysics","fromDomToCanvas","left","top","width","height","x","y","setDomPosition","dom","rotation","element","value","_fromCanvasToDom","fromCanvasToDom","offsetWidth","offsetHeight","transformString","concat","style","transform","makeEnclosedBox","thickness","world","bodyDef","b2BodyDef","type","b2BodyType","b2_staticBody","fixDef","b2FixtureDef","shape","b2PolygonShape","density","friction","restitution","SetAsBox","position","fixt","CreateBody","CreateFixture","m_body","SetUserData","category","getBodyACategory","this","contact","GetFixtureA","GetUserData","getBodyBCategory","GetFixtureB","React","createContext","Provider","Box2dWorld","Consumer","props","_this","_classCallCheck","_getPrototypeOf","call","_defineProperty","_assertThisInitialized","b","m_bodyList","m_next","IsAwake","userData","removed","DestroyBody","_b$GetPosition","GetPosition","angle","GetAngle","rafId","undefined","Step","ClearForces","renderPhysics","physLoopStart","window","requestAnimationFrame","physLoop","Children","map","children","child","_internalType","cloneElement","worldRef","_props$gravity","gravity","_props$allowSleep","allowSleep","_props$scaleFactor","scaleFactor","_props$enclosed","enclosed","_props$enclosureThick","enclosureThickness","_props$style","rest","_objectWithoutProperties","restProps","b2World","b2Vec2","worldChangeStatus","_contactCbProcess","cb","dataA","eventObj","rc","getOthersCategory","dataB","_contactListener","BeginContact","EndContact","PreSolve","oldManifold","PostSolve","impulse","SetContactListener","worldStyle","overlow","boxSizing","padding","_objectSpread","Component","cancelAnimationFrame","_this$props","_this$props$className","className","react_default","a","createElement","_extends","getChildrenMapped","Box2dObject","Box2dObject_classCallCheck","Box2dObject_getPrototypeOf","Box2dObject_defineProperty","Box2dObject_assertThisInitialized","body","rects","boundingRect","el","getBoundingClientRect","centerX","centerY","filteredRects","Array","from","filter","leftOffset","firstRect","i","length","curRect","fixtureX","right","fixtureY","_asyncToGenerator","regenerator_default","mark","_callee","_this$props$fixed","fixed","_this$props$restituti","_this$props$friction","_this$props$density","_this$props$shape","_this$props$category","data","initialForce","initialImpulse","bullet","domWidth","domHeight","domLeft","domTop","_fromDomToCanvas","wrap","_context","prev","next","b2_dynamicBody","overflow","offsetLeft","offsetTop","getClientRects","console","log","createFixturesForInline","Error","b2CircleShape","setState","circleRadius","SetBullet","applyForce","applyImpulse","physicsInited","stop","_ref2","_ref3","_slicedToArray","ApplyForce","GetWorldCenter","_ref4","_ref5","ApplyLinearImpulse","state","SetAwake","waitFor","physicsInit","prevProps","prevState","_this2","_this$state","_this$props$hideUntil","hideUntil","_this$props$children$","styles","display","willChange","visibility","borderRadius","ref","Box2dObject_objectSpread","defaultProps","__webpack_require__","d","__webpack_exports__","World","Item"],"mappings":"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","file":"static/js/docs-getting-started~docs-item~docs-world.9b9c64f3.js","sourcesContent":["//I hate writing utils file. Typically that means don't know how to group your utilities\n//for now this will have to do\nimport {b2BodyDef,b2FixtureDef,b2Body,b2PolygonShape,b2BodyType} from  \"@flyover/box2d\";\n\n//some utilities to deal with co-ordinate systems variations with some sanity intact\n//seems simple enough. But without these , I get very easily confused\n\n//Box2d typically deals with meters(realworld) and not pixels(our canvas on screen) \nconst fromPhysicsToCanvas = (n,SCALE) => n*SCALE;\nconst fromCanvasToPhysics = (n,SCALE) => n/SCALE; \n\n//Dom co-ordinate and position system is slightly different from canvas positioning\nconst fromCanvasToDom =(x,y,width,height) => {\n\tlet left = x-(width/2),\n\t\ttop = y - (height/2);\n\treturn {left,top};\n};\nconst fromDomToCanvas = (left,top,width,height) =>{\n\tlet x = left+(width/2),\n\t\ty = top+(height/2);\n\treturn {x,y};\n};\n\n\n//trying my best to support every browser I can with vendor prefixes\nconst setVendorPrefixedTransform = (element, value)=> {\n  element.style[\"webkitTransform\"] = value;\n  element.style[\"mozTransform\"] = value;\n  element.style[\"msTransform\"] = value;\n  element.style[\"oTransform\"] = value;\n  element.style.transform = value;\n}\n\nconst setDomPosition = (dom,x,y,rotation,SCALE) => {\n\t//console.log('got SCALE',SCALE,{x,y,rotation});\n\tlet {left,top }= fromCanvasToDom(fromPhysicsToCanvas(x,SCALE),fromPhysicsToCanvas(y,SCALE),dom.offsetWidth,dom.offsetHeight);\n\t//console.log('converted',{left,top,ow:dom.offsetWidth,oh:dom.offsetHeight});\n\tlet transformString = `translate(${left}px,${top}px) rotate(${rotation}rad)`;\n\t//dom.style.transform = transformString;\n\t//console.log('dom transforming');\n\tsetVendorPrefixedTransform(dom,transformString);\n};\n\n//without this , beginners (and almost everybody) will go mad\n//this creates a box fence of static bodies to prevent the objects falling out of the visible area and continuing to fall infinitely like Alice in rabbit hole\nconst makeEnclosedBox = (width,height,thickness,world,SCALE) => {\n\tvar bodyDef = new b2BodyDef;\n\tbodyDef.type = b2BodyType.b2_staticBody;\n\tvar fixDef = new b2FixtureDef;\n\tfixDef.shape = new b2PolygonShape;\n\t// half width, half height.\n\tfixDef.density = 1.0;\n\tfixDef.friction = 0.5;\n\tfixDef.restitution = 0;\n\n\t//left \n\tfixDef.shape.SetAsBox(fromCanvasToPhysics(thickness/2,SCALE),fromCanvasToPhysics(height/2,SCALE))\n\tbodyDef.position.x = fromCanvasToPhysics(thickness/2,SCALE);\n\tbodyDef.position.y = fromCanvasToPhysics(height/2,SCALE);\n\tlet fixt = world.CreateBody(bodyDef).CreateFixture(fixDef);\n\tfixt.m_body.SetUserData({category:'_LEFT_WALL_'});\n\t//bottom\n\t//half width,half height\n\tfixDef.shape.SetAsBox(fromCanvasToPhysics(width/2,SCALE),fromCanvasToPhysics(thickness/2,SCALE));\n\tbodyDef.position.x = fromCanvasToPhysics(width/2,SCALE);\n\tbodyDef.position.y = fromCanvasToPhysics(height,SCALE);\n\tfixt = world.CreateBody(bodyDef).CreateFixture(fixDef);\n\tfixt.m_body.SetUserData({category:'_BOTTOM_WALL_'});\n\n\t//top\n\tfixDef.shape.SetAsBox(fromCanvasToPhysics(width/2,SCALE),fromCanvasToPhysics(thickness/2,SCALE));\n\tbodyDef.position.x = fromCanvasToPhysics(width/2,SCALE);\n\tbodyDef.position.y = fromCanvasToPhysics(thickness/2,SCALE);\n\tfixt = world.CreateBody(bodyDef).CreateFixture(fixDef);\n\tfixt.m_body.SetUserData({category:'_TOP_WALL_'});\n\n\t//right\n\tfixDef.shape.SetAsBox(fromCanvasToPhysics(thickness/2,SCALE),fromCanvasToPhysics(height/2,SCALE));\n\tbodyDef.position.x = fromCanvasToPhysics(width,SCALE);\n\tbodyDef.position.y = fromCanvasToPhysics(height/2,SCALE);\n\tfixt = world.CreateBody(bodyDef).CreateFixture(fixDef);\n\tfixt.m_body.SetUserData({category:'_RIGHT_WALL_'});\n\n}\n\nconst delay = (millis)=> new Promise((resolve,reject)=>{\n\tsetTimeout(()=>resolve(),millis);\n});\n\nconst TWO_NUMBERS = function(props, propName, componentName) {\n  if (!Array.isArray(props[propName]) || props[propName].length != 2 || !props[propName].every(Number.isFinite)) {\n    return new Error(`${propName} needs to be an array of two numbers`);\n  }\n\n  return null\n}\n\n\n\n\nconst TWO_NUMBERS_OPTIONAL = function(props, propName, componentName) {\n  if(!props.TWO_NUMBERS_OPTIONAL){\n  \treturn null;\n  }\n   if (!Array.isArray(props[propName]) || props[propName].length != 2 || !props[propName].every(Number.isFinite)) {\n    return new Error(`${propName} needs to be an array of two numbers`);\n  }\n\n  return null\n}\n\nexport {fromPhysicsToCanvas,fromCanvasToPhysics,fromCanvasToDom,fromDomToCanvas,setDomPosition,makeEnclosedBox,delay,TWO_NUMBERS,TWO_NUMBERS_OPTIONAL};","export function getBodyACategory(){\n\treturn this.contact.GetFixtureA().m_body.GetUserData().category;\n}\n\nexport function getBodyBCategory(){\n\treturn this.contact.GetFixtureB().m_body.GetUserData().category;\n}\n\n//this is unreliable\n// export function getApproxImpactFromContact () {\n// \tconst contact = this.contact,\n// \t\tSCALE = this.SCALE;\n\n// \tlet impact = 0;\n// \tfor (let i = 0; i < contact.m_manifold.points.length; i++) {\n// \t\t//this is actually the impulse required to execute the collision response. I don't know any other simple ways to estimate the impact easily without the presolve /post solve callbacks.\n\n// \t\timpact+=contact.m_oldManifold.points[i].normalImpulse;\n// \t\t//console.log('impact calc',{impact});\n// \t\t//impact+=contact.m_oldManifold.points[i].tangentImpulse;\n// \t\t//console.log('impact calc',{impact});\n// \t}\n// \t//without multiplying , the value would be like 0.0016655....\n// \treturn impact;\n// };\n\n","import React,{Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {b2World,b2Vec2,b2BodyDef,b2FixtureDef,b2Body,b2PolygonShape,b2CircleShape,b2BodyType} from  \"@flyover/box2d\";\nimport {fromPhysicsToCanvas,fromCanvasToPhysics,fromCanvasToDom,fromDomToCanvas,setDomPosition,makeEnclosedBox,TWO_NUMBERS_OPTIONAL} from './Utils';\nimport {getApproxImpactFromContact,getBodyBCategory,getBodyACategory} from './ContactUtils';\n\n\nconst {Provider,Consumer} = React.createContext();\n\n\n\nclass Box2dWorld extends Component{\n\tconstructor(props){\n\t\tsuper(props);\n\t\tlet {width,height,\n\t\t\tgravity=[0,10],\n\t\t\tallowSleep=true,\n\t\t\tscaleFactor=60,\n\t\t\tenclosed=true,\n\t\t\tenclosureThickness=3,\n\t\t\tchildren,\n\t\t\tstyle={},\n\t\t\t...rest} = props;\n\t\tthis.restProps = rest;\n\t\tthis.SCALE = scaleFactor;\n\n\t\tthis.world = new b2World(new b2Vec2(gravity[0], gravity[1]),allowSleep);\n\t\twindow.world = this.world;\n\t\tif(enclosed){\n\t\t\tmakeEnclosedBox(width,height,enclosureThickness,this.world,this.SCALE);\n\t\t}\n\n\t\tthis.worldChangeStatus  = 0;\n\n\n\t\tthis._contactCbProcess  = (contact,cb)=> {\n\t\t\t\tlet SCALE = this.SCALE;\n\t\t\t\tconst dataA = contact.GetFixtureA().m_body.GetUserData();\n\t\t\t\tif(dataA){\n\t\t\t\t\tdataA[cb] = true;\n\t\t\t\t}\n\t\t\t\t//could use object pool to reuse this\n\t\t\t\tconst eventObj = {\n\t\t\t\t\t\tSCALE,\n\t\t\t\t\t\tcontact,\n\t\t\t\t\t};\n\t\t\t\tif(dataA && dataA.rc && dataA.rc.props[cb]){\n\t\t\t\t\teventObj.getOthersCategory = getBodyBCategory;\n\t\t\t\t\tdataA.rc.props[cb](eventObj);\n\t\t\t\t}\n\t\t\t\tconst dataB = contact.GetFixtureB().m_body.GetUserData();\n\t\t\t\tif (dataB){\n\t\t\t\t\tdataB[cb] = true;\n\t\t\t\t}\n\t\t\t\tif(dataB && dataB.rc && dataB.rc.props[cb]){\n\t\t\t\t\teventObj.getOthersCategory = getBodyACategory;\n\t\t\t\t\t//console.log('prop',dataB.rc.props,'cb',cb,'cbe',dataB.rc.props[cb]);\n\t\t\t\t\tdataB.rc.props[cb](eventObj);\n\t\t\t\t}\n\t\t}\n\n\t\tthis._contactListener = {\n\t\t\tBeginContact:(contact)=>{\n\t\t\t\tthis._contactCbProcess(contact,'onBeginContact');\n\t\t\t},\n\t\t\tEndContact: (contact) => {\n\t\t\t\tthis._contactCbProcess(contact,'onEndContact');\n\t\t\t},\n\t\t\tPreSolve:(contact,oldManifold)=>{\n\t\t\t\t//console.log('PreSolve',{contact,oldManifold});\n\t\t\t},\n\t\t\tPostSolve:(contact,impulse) => {\n\t\t\t\t//console.log('PostSolve',{contact,impulse});\n\t\t\t}\n\t\t};\n\n\t\tthis.world.SetContactListener(this._contactListener);\n\n\t\t//some styles to make this abomination work\n\t\tlet worldStyle = {\n\t\t\twidth,height,\n\t\t\tposition:'relative',\n\t\t\toverlow:'hidden',\n\t\t\tboxSizing:'border-box',\n\t\t\tpadding:enclosureThickness,\n\t\t};\n\t\tthis.worldStyle = {...worldStyle,...style};\n\t}\n\n\trenderPhysics = () => {\n\t\t//box2d libs typically implement linkedlist for fast looping\n\t\tfor (let b = this.world.m_bodyList; b; b = b.m_next) {\n\t\t\t// if(this.worldChangeStatus>0){\n\t\t\t// \tb.SetAwake(true);\n\t\t\t// \tthis.worldChangeStatus = 1;\n\t\t\t// }\n\t\t\tif(!b.IsAwake()){\n\t\t\t\t//if the body is sleeping , why bother\n\t\t\t\tcontinue;\n\t\t\t\t//I probably could optimize static bodies render only once. But not now\n\t\t\t}\n\n\t    \tlet userData=b.GetUserData();\n\t    \t\n\t    \tif(userData && userData.dom){\n\t    \t\t//console.log('userData',userData);\n\t    \t\tif(userData.removed){\n\t    \t\t\t//this is the most convenient place to do this. I should probably rename the method \n\t    \t\t\t//console.log('body removing',b);\n\t    \t\t\tthis.world.DestroyBody(b);\n\t    \t\t\t//this.worldChangeStatus=2;\n\t    \t\t} else {\n\t    \t\t\tlet {x,y} = b.GetPosition();\n\t    \t\t\tlet angle = b.GetAngle();\n\t    \t\t\t//sidestepping whole React and applying css transforms directly to the dom nodes directly (seems simpler this way , hopefully more performant)\n\t    \t\t\t//(dom,x,y,rotation,SCALE)\n\t    \t\t\tsetDomPosition(userData.dom,x,y,angle,this.SCALE);\n\t    \t\t}\n\t    \t}\n\n\t\t}\n\t\t// if(this.worldChangeStatus===1){\n\t\t// \tthis.worldChangeStatus=0;\n\t\t// }\n\n\t};\n\n\tphysLoop = ()=>{\n\t\tthis.rafId = undefined;\n\t\tthis.world.Step(\n\t\t         1 / 60   //frame-rate (just hoping typical 60hz. in future, planning to use webworkers for uninterrupted physics simulation)\n\t\t      ,  10       //velocity iterations\n\t\t      ,  10       //position iterations\n\t\t);\n\t   \tthis.world.ClearForces();\n\t   \tthis.renderPhysics();\n\t\tthis.physLoopStart();\n\t\t//console.log('physLoop running');\n\t};\n\n\tphysLoopStart = () => {\n\t\tif (!this.rafId) {\n\t       this.rafId = window.requestAnimationFrame(this.physLoop);\n\t    }\n\t};\n\n\tcomponentDidMount() {\n\t\t//start the simulation/render loop\n\t\tthis.physLoopStart();\n\t}\n\n\tcomponentWillUnmount() {\n\t\tif (this.rafId) {\n\t       window.cancelAnimationFrame(this.rafId);\n\t       this.rafId = undefined;\n\t    }\n\t}\n\n\tgetChildrenMapped = () => {\n\t\treturn React.Children.map(this.props.children,(child)=>{\n\t\t\tif(child.type._internalType==='Box2dObject'){\n\t\t\t\treturn React.cloneElement(child,{worldRef:this});\n\t\t\t} else {\n\t\t\t\treturn child;\n\t\t\t}\n\t\t});\n\t}\n\n\trender() {\n\t\tlet {className='Box2dWorld',children} = this.props;\n\t\t\n\t\treturn (\n\n\t\t\t<div className={className} {...this.restProps} style={this.worldStyle}>\n\t\t\t\t<Provider value={this}>\n\t\t\t\t\t{this.getChildrenMapped()}\n\t\t\t\t</Provider>\n\t\t\t</div>\n\t\t);\n\t}\n\n\n}\n\n\n\nBox2dWorld.propTypes = {\n\t/** Width of your world in pixels */\n\twidth: PropTypes.number.isRequired,\n\t/** height of your world in pixels */\n\theight: PropTypes.number.isRequired,\n\n\t/**\n\t\tGravity in the world in form of [x,y] array. By default the gravity is [0,10]. Meaning downward gravity of 10. For upward gravity it would be [0,-10]. Earth typically has gravity [0,9.8]\n\t*/\n\tgravity: TWO_NUMBERS_OPTIONAL,\n\n\t/**\n\t\tWhether to create an invisible walls enclosing our world. default is true. Without the enclosing, your objects will drift endlessly unless its been removed. This is mainly a convenience to prevent that. This is kind of like training wheel. Once you feel ready, disable this.\n\t*/\n\tenclosed: PropTypes.bool,\n\n\t/**\n\t\tThickness of the walls created if enclosed=true in pixels. By default this is 3px\n\t*/\n\tenclosureThickness: PropTypes.number,\n\n\t/**\n\t\tYou probably don't need to change this. Tells whether the objects in the physics world allowed tp sleep  or not. By default, its true.\n\t*/\n\tallowSleep: PropTypes.bool,\n\t/**\n\t\tInternal scaling factor used to translate the physical dimensions for simulation to the screen. Changing this value will have no effect of the size of the rendered objects. Its just used internally for the physical simulation. Mostly this parameter need not be edited. By default its 60\n\t*/\n\tscaleFactor: PropTypes.number,\n\t\n};\n\nexport {Consumer};\n\nexport default Box2dWorld;","import React,{Component,Fragment} from 'react';\nimport PropTypes from 'prop-types';\nimport {b2Vec2,b2BodyDef,b2FixtureDef,b2Body,b2PolygonShape,b2CircleShape,b2BodyType} from  \"@flyover/box2d\";\nimport {fromPhysicsToCanvas,fromCanvasToPhysics,fromCanvasToDom,fromDomToCanvas,setDomPosition,makeEnclosedBox,delay,TWO_NUMBERS_OPTIONAL} from './Utils';\n\n\nclass Box2dObject extends Component{\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state = {physicsInited:false,domWidth:null,domHeight:null,circleRadius:null};\n\t\tif(!props.worldRef){\n\t\t\tthrow new Error('worldRef prop is missing. Please use world consumer to acquire the worldRef or put the Item component direct child of the World');\n\t\t}\n\t}\n\tstatic _internalType=\"Box2dObject\";\n\t\n\t//I am not sure in which browsers this works\n\tcreateFixturesForInline = (fixDef,body,rects) => {\n\t\t//const rects = this.el.getClientRects();\n\t\tconst boundingRect = this.el.getBoundingClientRect();\n\t\t\n\t\tconst centerX = this.el.offsetWidth/2;\n\t\tconst centerY = boundingRect.height/2;\n\t\tconst SCALE = this.props.worldRef.SCALE;\n\t\t//if for some reason a fixture of size 0 created whole simulation screws up and not working \n\t\tconst filteredRects = Array.from(rects).filter(x => ((x.width>0)&&(x.height>0)));\n\t\tconst leftOffset = boundingRect.left;\n\t\tconst topOffset = boundingRect.top;\n\t\tconst firstRect = filteredRects[0];\n\t\tfor (let i = 0; i < filteredRects.length; i++) {\n\t\t\tlet curRect = filteredRects[i];\n\t\t\tlet fixtureX = (((curRect.left-leftOffset)+(curRect.right-leftOffset))/2)-centerX;\n\t\t\tlet fixtureY = ((curRect.top - firstRect.top)+(curRect.height/2))-centerY;\n\t\t\tfixDef.shape = new b2PolygonShape;\n\t\t\t\n\t\t\tfixDef.shape.SetAsBox(fromCanvasToPhysics(curRect.width/2,SCALE),fromCanvasToPhysics(curRect.height/2,SCALE),new b2Vec2(fromCanvasToPhysics(fixtureX,SCALE),fromCanvasToPhysics(fixtureY,SCALE)));\n\t\t\tlet fixt = body.CreateFixture(fixDef);\n\t\t}\n\t}\n\n\t//FIXME: this method is getting big\n\tphysicsInit = async () => {\n\t\tconst {fixed=false,restitution=0.1,friction=0.5,density=1,shape='box',category=null,worldRef,data,width,height,left,top,initialForce,initialImpulse,bullet}=this.props;\n\n\t\tconst bodyDef = new b2BodyDef;\n\t\tbodyDef.type = (fixed)? b2BodyType.b2_staticBody:b2BodyType.b2_dynamicBody;\n\t\t\n\t\tconst fixDef = new b2FixtureDef;\n\t\tfixDef.shape = new b2PolygonShape;\n\t\tfixDef.density = density;\n\t\tfixDef.friction = friction;\n\t\tfixDef.restitution = restitution;\n\t\tlet SCALE = worldRef.SCALE;\n\t\t\n\t\t\n\t\t//had to be done to get browser realize width/height in position:relative\n\t\tthis.el.style.overflow='auto';\n\t\t//FIXME: Check browser compatibility of these methods.(I don't want to use jquery 😠 ). \n\t\tlet domWidth = (width)?width: this.el.offsetWidth,\n\t\t\tdomHeight =(height)?height: this.el.offsetHeight,\n\t\t\tdomLeft = ('left' in this.props)?left: this.el.offsetLeft,\n\t\t\tdomTop = ('top' in this.props )?top:this.el.offsetTop;\n\t\t\n\t\n\t\t\t\t\t// (left,top,width,height) \n\t\tlet {x,y} = fromDomToCanvas(domLeft,domTop,domWidth,domHeight);\n\t\t\n\t\tbodyDef.position.x = fromCanvasToPhysics(x,worldRef.SCALE);\n\t\tbodyDef.position.y = fromCanvasToPhysics(y,worldRef.SCALE);\n\t\t\n\t\tconst body  = worldRef.world.CreateBody(bodyDef);\n\t\t\n\t\tif(shape==='box'){\n\t\t\tconst rects = this.el.getClientRects();\n\t\t\tconsole.log('rects',rects);\n\t\t\tif(rects.length>1){\n\t\t\t\tconsole.log('inline element detected',rects);\n\t\t\t\t//this is an inline element\n\t\t\t\tthis.createFixturesForInline(fixDef,body,rects);\n\t\t\t} else {\n\t\t\t\tfixDef.shape = new b2PolygonShape;\n\t\t\t\t//half width,half height\n\t\t\t\tfixDef.shape.SetAsBox(fromCanvasToPhysics(domWidth/2,SCALE),fromCanvasToPhysics(domHeight/2,SCALE));\n\t\t\t\tbody.CreateFixture(fixDef);\n\t\t\t}\n\t\t} else if(shape==='circle'){\n\t\t\tif (domHeight != domWidth){\n\t\t\t\tthrow new Error('For shape circle, height and width should be same');\n\t\t\t}\n\t\t\tfixDef.shape = new b2CircleShape(fromCanvasToPhysics(domHeight/2,SCALE));\n\t\t\tbody.CreateFixture(fixDef);\n\t\t\tthis.setState({circleRadius:domHeight/2});\n\n\t\t} else {\n\t\t\tthrow new Error(`Unknown shape ${shape}, only box and circle supported for now`);\n\t\t}\n\t\t\n\t\tconst userData = {category,dom:this.el,rc:this};\n\t\tif(data){\n\t\t\tuserData.data = data;\n\t\t}\n\t\t//console.log('setting userData',userData);\n\t\tbody.SetUserData(userData);\n\t\tthis.body = body;\n\t\tif(bullet){\n\t\t\tthis.body.SetBullet(bullet);\n\t\t}\n\t\t\n\t\tif(initialForce){\n\t\t\tthis.applyForce(initialForce);\n\t\t}\n\t\tif(initialImpulse){\n\t\t\tthis.applyImpulse(initialImpulse);\n\t\t}\n\t\tthis.setState({domHeight,domWidth,physicsInited:true});\n\t};\n\n\tapplyForce = ([x,y]) => {\n\t\tif(!this.body){\n\t\t\treturn;\n\t\t}\n\t\tthis.body.ApplyForce(new b2Vec2(x,y),this.body.GetWorldCenter());\n\t}\n\n\tapplyImpulse = ([x,y]) => {\n\t\tif(!this.body){\n\t\t\treturn;\n\t\t}\n\t\tthis.body.ApplyLinearImpulse(new b2Vec2(x,y),this.body.GetWorldCenter());\n\t}\t\n\n\tcomponentWillUnmount() {\n\t\t//console.log('component unmounting',this.body);\n\t\tif(this.body){\n\n\t\t\tlet userData = this.body.GetUserData();\n\t\t\tuserData.removed = true;\n\t\t\tthis.body.SetUserData(userData);\n\t\t\tthis.body.SetAwake(true);\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\t\tif('waitFor' in this.props){\n\t\t\tif(this.props.waitFor){\n\t\t\t\tthis.physicsInit();\n\t\t\t}\n\t\t} else {\n\t\t\tthis.physicsInit();\n\t\t}\n\t}\n\n\tcomponentDidUpdate(prevProps, prevState) {\n\t\tif(!('waitFor' in this.props)){\n\t\t\treturn;\n\t\t}\n\n\t\tif(this.state.physicsInited){\n\t\t\treturn;\n\t\t}\n\n\t\tif(this.props.waitFor){\n\t\t\tthis.physicsInit();\n\t\t}\n\t}\n\n\trender() {\n\t\tlet {physicsInited,domHeight,domWidth,circleRadius} = this.state;\n\t\tlet {hideUntil=true} = this.props;\n\t\tlet {style = {}} = this.props.children.props;\n\n\t\tconst styles = (physicsInited)?{position:'absolute',display:'block',left:0,top:0,height:domHeight,width:domWidth,willChange:'transform'}:(hideUntil?{visibility:'hidden'}:{});\n\n\t\t\n\t\tif(physicsInited && circleRadius){\n\t\t\tstyles.borderRadius=circleRadius;\n\t\t}\n\t\treturn React.cloneElement(this.props.children,{ref:(el)=>{\n\t\t\tthis.el = el;\n\t\t},style: {...style,...styles}});\n\t}\n\n}\n\nBox2dObject.defaultProps = {\n\tfixed: false,\n\tdensity:1,\n\tshape:'box',\n\tbullet:false,\n\n};\n\nBox2dObject.propTypes = {\n\t/** This component has to have a single dom element child */\n\tchildren: PropTypes.element.isRequired,\n\t/** Height of the object. If not specified it will try to determine automatically (Auto detection is iffy due to the complexity of css rendering) */\n\theight: PropTypes.number,\n\t/** Width of the object. If not specified it will try to determine automatically (Auto detection is iffy due to the complexity of css rendering) */\n\twidth: PropTypes.number,\n\n\t/** Left of the object. If not specified it will try to determine automatically (Auto detection is iffy due to the complexity of css rendering) */\n\tleft: PropTypes.number,\n\n\t/** Height of the object. If not specified it will try to determine automatically (Auto detection is iffy due to the complexity of css rendering) */\n\ttop: PropTypes.number,\n\n\t/** whether or not the object is fixed static or not. Setting this true would making the object fixed in its initial left and top */\n\tfixed: PropTypes.bool,\n\n\t/** density of the object. This combined with height and width determine the mass of the object. Higher this value heavier the object is */\n\tdensity: PropTypes.number,\n\n\t/** Friction for object in physics simuation. lesser the value, more slippery the object would be */\n\tfriction: PropTypes.number,\n\n\t/** Bounciness or elasticity of the object.its should be between 0 to 1. Higher the value more the object bounce with other objects */\n\trestitution: PropTypes.number,\n\n\t/** This is a special flag , that set true for very fast(really really) moving objects. Set this to true . But More objects with this flag true would cause performance issues. Rule of thumb. If you notice some objects pass through other objects when moving fast, set this to true */\n\tbullet: PropTypes.bool,\n\n\t/** callback on begin colliding with other objects */\n\tonBeginContact: PropTypes.func,\n\n\t/** callback on end of colliding. This may not happen always */\n\tonEndContact: PropTypes.func,\n\n\t/** shape to simulate */\n\tshape: PropTypes.oneOf(['circle','box']),\n\n\t/** in form of [x,y] . Setting this would apply this force after creating the body */\n\tinitialForce: TWO_NUMBERS_OPTIONAL,\n\n\t/** \n\t\tin form of [x,y] . Same as force . But it aplies impulse instead of force.\n\t */\n\tinitialImpulse: TWO_NUMBERS_OPTIONAL,\n\n\t/**\n\t\tA string tag to identify the kind of object. This would be primarily used to identify the objects after collision\n\t*/\n\tcategory: PropTypes.string,\n};\n\nexport default Box2dObject;","import Box2dWorld,{Consumer} from './Box2dWorld';\nimport Box2dObject from './Box2dObject';\nconst World = Box2dWorld,WorldConsumer=Consumer,Item=Box2dObject;\nexport {World,WorldConsumer,Item};"],"sourceRoot":""}